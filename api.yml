openapi: 3.0.0

info:
  title: Drop
  description: A self-hosted, end-to-end encrypted personal file sharing service
  version: 0.1.0

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

paths:
  /admin/tokens:
    get:
      summary: Retrieve all admin tokens.
      tags:
        - Admin Tokens
      security:
        - AdminAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensResponse"
        "403":
          $ref: "#/components/errors/403"
        "500":
          $ref: "#/components/errors/500"
  /admin/tokens/{tokenId}:
    get:
      summary: Retrieve an admin token.
      tags:
        - Admin Tokens
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
      respones:
        "200":
          content:
            application/json:
              $ref: "#/components/schemas/TokenResponse"
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
    delete:
      summary: Delete a token for an archive.
      tags:
        - Admin Tokens
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
      respones:
        "200":
          description: Deleted
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"

  /archives:
    get:
      summary: List all archives.
      tags:
        - Archives
      security:
        - AdminAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArchivesResponse"
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
    post:
      summary: Create an archive.
      tags:
        - Archives
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
           application/json:
             schema:
               $ref: "#/components/schemas/ArchiveRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArchiveResponse"
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
  /archives/{archiveId}:
    get:
      summary: Retrieve an archive.
      tags:
        - Archives
      security:
        - AdminAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArchiveResponse"
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
    delete:
      summary: Delete an archive.
      tags:
        - Archives
      security:
        - AdminAuth: []
      responses:
        "200":
          description: Deleted
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"

  /archives/{archiveId}/tokens:
    get:
      summary: Retrieve tokens for an archive.
      tags:
        - Archive Tokens
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensResponse"
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
    post:
      summary: Create a token for an archive.
      tags:
        - Archive Tokens
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
  /archives/{archiveId}/tokens/{tokenId}:
    get:
      summary: Retrieve a token for an archive.
      tags:
        - Archive Tokens
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
      respones:
        "200":
          content:
            application/json:
              $ref: "#/components/schemas/TokenResponse"
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
    delete:
      summary: Delete a token for an archive.
      tags:
        - Archive Tokens
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
      respones:
        "200":
          description: Deleted
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"

  /archives/{archiveId}/files:
    get:
      summary: Retrieve all files for an archive.
      tags:
        - Files
      security:
        - AdminAuth: []
      parameters:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesResponse"
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
    post:
      summary: Create a file.
      tags:
        - Files
      security:
        - ArchiveAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileRequest"
        responses:
          "201":
            description: Created
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/FileResponse"
          "403":
            description: Forbidden
          "404":
            description: Not found
        "500":
          $ref: "#/components/errors/500"
  /archives/{archiveId}/files/{fileId}:
    get:
      summary: Retrieve a file.
      tags:
        - Files
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
        - $ref: "#/components/parameters/FileId"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileResponse"
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
    delete:
      summary: Delete a file.
      tags:
        - Files
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
        - $ref: "#/components/parameters/FileId"
      responses:
        "200":
          description: Deleted
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
  /archives/{archiveId}/files/{fileId}/content:
    get:
      summary: Download bytes of a file.
      tags:
        - Files
      security:
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
        - $ref: "#/components/parameters/FileId"
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"
    post:
      summary: Upload bytes of a file.
      tags:
        - Files
      security:
        - ArchiveAuth: []
      parameters:
        - $ref: "#/components/parameters/ArchiveId"
        - $ref: "#/components/parameters/FileId"
        - in: header
          name: Content-Range
          type: string
          required: false
          description: The range of bytes to write. If not specified, the entire file is expected to be sent in the body. The body may be streamed over time.
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Created
        "403":
          $ref: "#/components/errors/403"
        "404":
          $ref: "#/components/errors/404"
        "500":
          $ref: "#/components/errors/500"

tags:
  - name: Archives
    description: Archive-related endpoints
  - name: Files
    description: File-related endpoints
  - name: Archive Tokens
    description: Archive token-related endpoints
  - name: Admin Tokens
    description: Admin token-related endpoints

components:
  schemas:
    ArchiveRequest:
      type: object
      required:
        - name
        - maximumFileCount
        - maximumFileSize
        - maximumSize
      properties:
        name:
          type: string
          description: Name of the archive.
        maximumFileCount:
          type: number
          minimum: 0
          description: The maximum number of files allowed to be uploaded. Use 0 to allow any count.
        maximumFileSize:
          type: number
          minimum: 0
          description: The maximum size of an uploaded file. Use 0 to allow any size.
        maximumSize:
          type: number
          minimum: 0
          description: The total maximum size of the uploaded files. use 0 to allow any size.

    ArchiveResponse:
      type: object
      required:
        - id
        - created
        - name
        - maximumFileCount
        - maximumFileSize
        - maximumSize
        - files
      properties:
        id:
          type: string
        created:
          type: number
          description: The UTC timestamp at which the archive was created.
        name:
          type: string
          description: Name of the archive.
        maximumFileCount:
          type: number
          description: The maximum number of files allowed to be uploaded. Use 0 to allow any count.
        maximumFileSize:
          type: number
          description: The maximum size of an uploaded file. Use 0 to allow any size.
        maximumSize:
          type: number
          description: The total maximum size of the uploaded files. use 0 to allow any size.
        files:
          type: array
          description: The files stored in the archive.
          items:
            $ref: "#/components/schemas/FileResponse"

    ArchivesResponse:
      type: object
      required:
        - archives
      properties:
        archives:
          type: array
          items:
            $ref: "#/components/schemas/ArchiveResponse"

    TokenRequest:
      type: object
      required:
        - lifetime
      properties:
        lifetime:
          type: number
          description: The number of seconds the token should be valid.

    TokenResponse:
      type: object
      required:
        - id
        - created
        - token
      properties:
        id:
          type: string
        created:
          type: number
          description: The UTC timestamp at which the token was created.
        token:
          type: string
          description: Token with upload access to the archive.

    TokensResponse:
      type: object
      required:
        - tokens
      properties:
        tokens:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              created:
                type: number
                description: The UTC timestamp at which the token was created.

    FileRequest:
      type: object
      required:
        - name
        - lastModified
        - size
        - mime
      properties:
        name:
          type: string
          description: Name of the file.
        lastModified:
          type: number
          description: The UTC timestamp when the file was last modified.
        size:
          type: number
          description: Size in bytes.
        mime:
          type: string
          description: The MIME type of the file.

    FileResponse:
      type: object
      required:
        - id
        - created
        - name
        - lastModified
        - size
        - mime
      properties:
        id:
          type: string
          description: "The created file's id, used for the upload"
        created:
          type: number
          description: The UTC timestamp at which the file was created.
        name:
          type: string
          description: Name of the file.
        lastModified:
          type: number
          description: The UTC timestamp when the file was last modified.
        size:
          type: number
          description: Size in bytes.
        mime:
          type: string
          description: The MIME type of the file.

    FilesResponse:
      type: object
      required:
        - files
      properties:
        files:
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string

  parameters:
    ArchiveId:
      in: path
      name: archiveId
      schema:
        type: string
      required: true
      description: The id of the target archive.

    FileId:
      in: path
      name: fileId
      schema:
        type: string
      required: true
      description: The id of the target file.

  errors:
    "403":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  securitySchemes:
    ArchiveAuth:
      type: http
      scheme: bearer
      description: Authentication for a specific archive.
    AdminAuth:
      type: http
      scheme: bearer
      description: Authentication for an admin.
